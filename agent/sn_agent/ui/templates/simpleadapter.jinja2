{% extends 'base.jinja2' %}

{% set page_title = 'Simple Adapter' %}

{% block content %}
<div id="app">
    <button @click="sendCanPerformSimpleAdapter">Can Perform Simple Adapter</button>
    <br>
    <button @click="sendPerformMultiAgentAdapter">Perform Multi-Agent Adapter</button>
</div>
{% endblock %}

{% block page_js %}
<script>
    var mix = {
      methods: {
        sendCanPerformSimpleAdapter: function() {
            var request = {
                "jsonrpc": "2.0",
                "method": "can_perform",
                "params": {
                    "service_node_id": "deadbeef-aaaa-bbbb-cccc-000000000101"
                },
                "id": 3
            };
            this.ws.send(JSON.stringify(request));
        },
        sendPerformSimpleAdapter: function() {
            // This tests the very simple example adapter defined in singnet/examples/simple_adapter/__init__.py
            var request = {
                "jsonrpc": "2.0",
                "method": "perform",
                "params": {
                    "service_node_id": "deadbeef-aaaa-bbbb-cccc-000000000101",

                    // Defines the parameters for the list of job items which will be passed to the perform function.
                    "job_params":
                        [
                            {   // This is the dictionary for the first job item.

                                // An input type of "attached" means that the JSON RPC request contains
                                // the data needed to perform the service. This contrasts to AI services
                                // which require large input data which is usually not passed with the
                                // request, but passed by reference using an URL.
                                "input_type": "attached",

                                // The dictionary entry for "input_data", which is itself a
                                // dictionary, gets returned from the AgentSimple python
                                // function: get_attached_job_data. It contains one entry for
                                // "simple_text". This data will get formatted into the template
                                // defined in AgentSimple's post_load_initialize function.
                                "input_data": {"simple_text": "Sophia loves humans"},
                                //            --------------------------------------
                                //            ^^^^ dictionary passed to perform ^^^^

                                // This indicates that the JSON RPC request contains the results in
                                // the response.
                                "output_type": "attached"
                            },
                            {
                                // This is the dictionary for the second job item.
                                "input_type": "attached",
                                "input_data": {"simple_text": "the Singularity is near"},
                                "output_type": "attached"
                            }
                        ]
                },
                "id": 3
            };
            this.ws.send(JSON.stringify(request));
        },
        sendPerformMultiAgentAdapter: function() {
            var request = {
                "jsonrpc": "2.0",
                "method": "perform",
                "params": {
                    "service_node_id": "deadbeef-aaaa-bbbb-cccc-000000000001",
                    "job_params":
                        [
                            {
                                "input_type": "file",
                                "input_url": "http://test.com/inputs/test_input.txt",
                                "output_type": "file_url_put",
                                "output_url": "test_output.txt"
                            }
                        ]
                },
                "id": 3
            };
            this.ws.send(JSON.stringify(request));
        }
      }
    };
</script>
{% endblock %}
