{% extends 'base.jinja2' %}

{% set page_title = '' %}

{% block content %}
<div id="app">
  <div v-if="isHome">
    <button @click="sendCanPerformSimpleAdapter">Can Perform Simple Adapter</button>
    <br>
    <button @click="sendPerformMultiAgentAdapter">Perform Multi-Agent Adapter</button>
    <br>
    <button @click="sendPerformRelexParse">Perform Relex Relationship Extraction</button>
    <br>
    <button @click="sendPerformMNIST">Perform MNIST Classification</button>
    <br>
    Aigents:<br>
    <button @click="sendAigentsRequest('rss_feed')">Send request to Aigents RSS feeder</button>
    &nbsp;
    <select v-model="aigentsArea" id="aigents_areas">
      <option value="ai">ai</option>
      <option value="business">business</option>
    </select>
    <br>
    <button @click="sendAigentsRequest('social_graph')">Send request to Aigents social grapher</button>
    &nbsp;
    <select v-model="aigentsNetwork">
      <option value="steemit">steemit</option>
      <option value="golos">golos</option>
    </select>
    &nbsp;
    <span style="font-size:12">userid:</span><input v-model="aigentsUserId" type="text"></input>
    <br>
    <button @click="sendAigentsRequest('text_extract')">Send request to Aigents text extractor</button>
    &nbsp;
    <span style="font-size:12;">pattern:</span><input v-model="aigentsPattern"  type="text" size="50"></input>
    &nbsp;
    <span style="font-size:12;">text:</span><input v-model="aigentsText" type="text" size="120"></input>
    <br>
    <textarea rows="10" cols="80" v-model="aigentsRequest"  style="font-size:10"></textarea>
  </div>
</div>

<script>
    {% include "settings.js" %}

    var app = new Vue({
      el: '#app',
      data: {
        isHome: true,
        ws: null,
        receivedMsg: '',
        // set some defaults for the options
        aigentsArea: 'ai',
        aigentsPattern: '{president presidency presidents presidential}',
        aigentsText: 'Yo! Washington was first president of the United States. Also, can place url here: https://www.nytimes.com/',
        aigentsUserId: 'aigents',
        aigentsNetwork: 'steemit',
        aigentsRequest: ''
      },
      methods: {
        sendCanPerformSimpleAdapter: function() {
            var request = {
                "jsonrpc": "2.0",
                "method": "can_perform",
                "params": {
                    "service_node_id": "deadbeef-aaaa-bbbb-cccc-000000000101"
                },
                "id": 3
            };
            this.ws.send(JSON.stringify(request));
        },
        sendPerformSimpleAdapter: function() {
            // This tests the very simple example adapter defined in singnet/examples/simple_adapter/__init__.py
            var request = {
                "jsonrpc": "2.0",
                "method": "perform",
                "params": {
                    "service_node_id": "deadbeef-aaaa-bbbb-cccc-000000000101",

                    // Defines the parameters for the list of job items which will be passed to the perform function.
                    "job_params":
                        [
                            {   // This is the dictionary for the first job item.

                                // An input type of "attached" means that the JSON RPC request contains
                                // the data needed to perform the service. This contrasts to AI services
                                // which require large input data which is usually not passed with the
                                // request, but passed by reference using an URL.
                                "input_type": "attached",

                                // The dictionary entry for "input_data", which is itself a
                                // dictionary, gets returned from the AgentSimple python
                                // function: get_attached_job_data. It contains one entry for
                                // "simple_text". This data will get formatted into the template
                                // defined in AgentSimple's post_load_initialize function.
                                "input_data": {"simple_text": "Sophia loves humans"},
                                //            --------------------------------------
                                //            ^^^^ dictionary passed to perform ^^^^

                                // This indicates that the JSON RPC request contains the results in
                                // the response.
                                "output_type": "attached"
                            },
                            {
                                // This is the dictionary for the second job item.
                                "input_type": "attached",
                                "input_data": {"simple_text": "the Singularity is near"},
                                "output_type": "attached"
                            }
                        ]
                },
                "id": 3
            };
            this.ws.send(JSON.stringify(request));
        },
        sendPerformMultiAgentAdapter: function() {
            var request = {
                "jsonrpc": "2.0",
                "method": "perform",
                "params": {
                    "service_node_id": "deadbeef-aaaa-bbbb-cccc-000000000001",
                    "job_params":
                        [
                            {
                                "input_type": "file",
                                "input_url": "http://test.com/inputs/test_input.txt",
                                "output_type": "file_url_put",
                                "output_url": "test_output.txt"
                            }
                        ]
                },
                "id": 3
            };
            this.ws.send(JSON.stringify(request));
        },
        sendPerformRelexParse: function() {
            // This tests the relex semantic relationship entity extracter defined in singnet/examples/relex/__init__.py
            var request = {
                "jsonrpc": "2.0",
                "method": "perform",
                "params": {
                    "service_node_id": "deadbeef-aaaa-bbbb-cccc-000000000202",

                    // Defines the parameters for the list of job items which will be passed to the perform function.
                    "job_params":
                        [
                            {
                                "input_type": "attached",
                                "input_data": {"sentence": "The Singularity will come before we know it."},
                                "output_type": "attached"
                            },
                            {
                                // This is the dictionary for the second job item.
                                "input_type": "attached",
                                "input_data": {"sentence": "Will women robots rule the world?"},
                                "output_type": "attached"
                            }
                        ]
                },
                "id": 3
            };
            this.ws.send(JSON.stringify(request));
        },
        sendAigentsRequest: function(type) {

            var data = {};

            switch(type) {
              case 'rss_feed':
                data = {'area': this.aigentsArea };
                break;
              case 'text_extract':
                data = {'pattern': this.aigentsPattern,'text': this.aigentsText}
                break;
              case 'social_graph':
                data = {'network': this.aigentsNetwork,'userid': this.aigentsUserId}
                break;
            }

             var request = {
                 "jsonrpc": "2.0",
                 "method": "perform",
                 "params": {

                     "service_node_id": "deadbeef-aaaa-bbbb-cccc-100000000001",

                     // Defines the parameters for the list of job items which will be passed to the perform function.
                     "job_params":
                         [
                             {
                                 "input_type": "attached",
                                 "input_data": {"type": type, "data": data},
                                 "output_type": "attached"
                             }
                         ]
                 },
                 "id": 3
             };
             this.ws.send(JSON.stringify(request));
         },
         sendPerformMNIST: function() {
             var request = {
                 "jsonrpc": "2.0",
                 "method": "perform",
                 "params": {
                     "service_node_id": "deadbeef-aaaa-bbbb-cccc-111111111101",
                     "job_params":
                         [
                             {
                                 "input_type": "attached",
                                 "input_data": {
                                     "images": [

                                         // A 28 x 28 image of a 7 which has been flattened into a single
                                         // float 784-element vector format as required by the tensorflow mnist adapter.
                                         [
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0,
                                             0.32941177, 0.72549021, 0.62352943, 0.59215689, 0.23529413, 0.14117648,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0.8705883, 0.99607849, 0.99607849, 0.99607849, 0.99607849,
                                             0.9450981, 0.77647066, 0.77647066, 0.77647066, 0.77647066, 0.77647066,
                                             0.77647066, 0.77647066, 0.77647066, 0.66666669, 0.20392159, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0.26274511, 0.44705886, 0.28235295,
                                             0.44705886, 0.63921571, 0.89019614, 0.99607849, 0.88235301, 0.99607849,
                                             0.99607849, 0.99607849, 0.98039222, 0.89803928, 0.99607849, 0.99607849,
                                             0.54901963, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0.06666667, 0.25882354,
                                             0.05490196, 0.26274511, 0.26274511, 0.26274511, 0.23137257, 0.08235294,
                                             0.92549026, 0.99607849, 0.41568631, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0,
                                             0.32549021, 0.99215692, 0.81960791, 0.07058824, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0,
                                             0.08627451, 0.91372555, 1., 0.32549021, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0.50588238, 0.99607849, 0.9333334, 0.17254902, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0,
                                             0.23137257, 0.97647065, 0.99607849, 0.24313727, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0.52156866, 0.99607849, 0.73333335, 0.01960784, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0,
                                             0.03529412, 0.80392164, 0.97254908, 0.227451, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0.49411768, 0.99607849, 0.71372551, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0,
                                             0.29411766, 0.98431379, 0.94117653, 0.22352943, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0,
                                             0.07450981, 0.86666673, 0.99607849, 0.65098041, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0,
                                             0.01176471, 0.7960785, 0.99607849, 0.8588236, 0.13725491, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0.14901961, 0.99607849, 0.99607849, 0.3019608, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0,
                                             0.12156864, 0.87843144, 0.99607849, 0.45098042, 0.00392157, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0.52156866, 0.99607849, 0.99607849, 0.20392159, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0.2392157,
                                             0.94901967, 0.99607849, 0.99607849, 0.20392159, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0,
                                             0.47450984, 0.99607849, 0.99607849, 0.8588236, 0.15686275, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0.47450984, 0.99607849, 0.81176478, 0.07058824, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0, 0, 0, 0,
                                             0, 0, 0, 0
                                         ]

                                     ]
                                 },
                                 "output_type": "attached"
                             }
                         ]
                 },
                 "id": 3
             };
             this.ws.send(JSON.stringify(request));
         }
      },
      created: function() {
        var self = this;
        this.ws = new WebSocket('ws://'+my_host+':9050/api/ws');

        this.ws.onopen = function () {
            console.log('Connection Opened');
        };

        this.ws.onmessage = function (evt) {
            self.receivedMsg = evt.data;
            console.log(self.receivedMsg);
            var json = JSON.parse(self.receivedMsg);
    	      //TODO: handle multiple responses?
    	      //TODO: have adapter_type part of protocol?
    	      if (json.result && json.result.length > 0) {
    		      result = json.result[0];
    		        if (result.adapter_type && result.adapter_type == 'aigents' && result && result.response_data) {
    			         self.aigentsRequest = result.response_data;
               }
    	     }
        };

        this.ws.onclose = function () {
            console.log("Connection is closed...");
        };

        this.ws.onerror = function (a, b, c, d) {
            console.log(a);
            console.log(b);
            console.log(c);
            console.log(d);
        };

        window.onbeforeunload = function (event) {
            self.ws.close();
        };
      }
    });

   function getAigentsResponse(text) {
       document.getElementById("aigents_out").textContent = text;
   }
</script>
{% endblock %}
